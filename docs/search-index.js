var searchIndex = {};
searchIndex["hyper_tls_hack"] = {"doc":"An implementation of `hyper`'s `AddrIncoming` that generates `TlsStream`s.","items":[[3,"AddrIncoming","hyper_tls_hack","A stream of TLS connections from binding to an address.",null,null],[5,"acceptor_from_p12_file","","Simple utility function that reads a certificate file, and returns a TlsAcceptor. Useful for examples in documentation :)",null,null],[11,"new","","Build a new `AddrIncoming` that that generates `TlsStream`s instead of `TcpStream`s.",0,{"i":[{"n":"socketaddr"},{"g":["tlsacceptor"],"n":"arc"},{"g":["handle"],"n":"option"}],"o":{"g":["addrincoming"],"n":"result"}}],[11,"from_std_listener","","Create a new `AddrIncoming` from the standard library's TCP listener.",0,{"i":[{"n":"stdtcplistener"},{"g":["tlsacceptor"],"n":"arc"},{"g":["handle"],"n":"option"}],"o":{"g":["addrincoming"],"n":"result"}}],[11,"local_addr","","Get the local address bound to this listener.",0,{"i":[{"n":"self"}],"o":{"n":"socketaddr"}}],[11,"set_keepalive","","Set whether TCP keepalive messages are enabled on accepted connections.",0,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"self"}}],[11,"set_nodelay","","Set the value of `TCP_NODELAY` option for accepted connections.",0,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"set_sleep_on_errors","","Set whether to sleep on accept errors.",0,{"i":[{"n":"self"},{"n":"bool"}]}],[11,"poll","","",0,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"AddrIncoming"]]};
initSearch(searchIndex);
